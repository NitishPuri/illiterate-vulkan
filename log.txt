Illiterate Vulkan!
App::initWindow {
  glfwInit()
  glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API)
  glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE)
  window = glfwCreateWindow(WIDTH, HEIGHT, "Vulkan", nullptr, nullptr)
}
App::initVulkan {
  App::createInstance {
    App::checkValidationLayerSupport {
      vkEnumerateInstanceLayerProperties(&layerCount, availableLayers.data())
      found validation layer:  VK_LAYER_KHRONOS_validation
    }
    VkInstanceCreateInfo createInfo{}
    App::getRequiredExtensions {
      glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount)
      vkEnumerateInstanceExtensionProperties(nullptr, &extensionCount, extensions.data())
      Available Extensions:  19
         VK_KHR_device_group_creation
         VK_KHR_external_fence_capabilities
         VK_KHR_external_memory_capabilities
         VK_KHR_external_semaphore_capabilities
         VK_KHR_get_physical_device_properties2
         VK_KHR_get_surface_capabilities2
         VK_KHR_surface
         VK_KHR_win32_surface
         VK_EXT_debug_report
         VK_EXT_debug_utils
         VK_EXT_swapchain_colorspace
         VK_KHR_display
         VK_KHR_get_display_properties2
         VK_KHR_surface_protected_capabilities
         VK_EXT_direct_mode_display
         VK_EXT_surface_maintenance1
         VK_NV_external_memory_capabilities
         VK_KHR_portability_enumeration
         VK_LUNARG_direct_driver_loading
      Required Extensions:  3
         VK_KHR_surface
         VK_KHR_win32_surface
         VK_EXT_debug_utils
    }
    validation layers are enabled
    App::populateDebugMessengerCreateInfo {
    }
    vkCreateInstance(&createInfo, nullptr, &instance)
  }
  App::setupDebugMessenger {
    App::populateDebugMessengerCreateInfo {
    }
    CreateDebugUtilsMessengerEXT {
      auto func = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(instance, "vkCreateDebugUtilsMessengerEXT")
      return func(instance, pCreateInfo, pAllocator, pDebugMessenger)
    }
  }
  App::createSurface {
    glfwCreateWindowSurface(instance, window, nullptr, &surface)
  }
  App::pickPhysicalDevice {
    vkEnumeratePhysicalDevices(instance, &deviceCount, devices.data())
    Available Devices:  2
    App::isDeviceSuitable {
      App::findQueueFamilies {
        queueFamilyCount : 6
        vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, queueFamilies.data())
        vkGetPhysicalDeviceSurfaceSupportKHR(device, i, surface, &presentSupport)
        found queue families 0 0
      }
      App::checkDeviceExtensionSupport {
        vkEnumerateDeviceExtensionProperties(device, nullptr, &extensionCount, availableExtensions.data())
      }
      App::querySwapChainSupport {
        vkGetPhysicalDeviceSurfaceCapabilitiesKHR(device, surface, &details.capabilities)
        vkGetPhysicalDeviceSurfaceFormatsKHR(device, surface, &formatCount, nullptr)
        vkGetPhysicalDeviceSurfacePresentModesKHR(device, surface, &presentModeCount, nullptr)
      }
    }
    found suitable device  NVIDIA GeForce RTX 3060 Laptop GPU
  }
  App::createLogicalDevice {
    App::findQueueFamilies {
      queueFamilyCount : 6
      vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, queueFamilies.data())
      vkGetPhysicalDeviceSurfaceSupportKHR(device, i, surface, &presentSupport)
      found queue families 0 0
    }
    vkCreateDevice(physicalDevice, &createInfo, nullptr, &device)
  }
  App::createSwapChain {
    App::querySwapChainSupport {
      vkGetPhysicalDeviceSurfaceCapabilitiesKHR(device, surface, &details.capabilities)
      vkGetPhysicalDeviceSurfaceFormatsKHR(device, surface, &formatCount, nullptr)
      vkGetPhysicalDeviceSurfacePresentModesKHR(device, surface, &presentModeCount, nullptr)
    }
    App::chooseSwapSurfaceFormat {
    }
    App::chooseSwapPresentMode {
    }
    App::chooseSwapExtent {
    }
    imageUsage: VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT
    App::findQueueFamilies {
      queueFamilyCount : 6
      vkGetPhysicalDeviceQueueFamilyProperties(device, &queueFamilyCount, queueFamilies.data())
      vkGetPhysicalDeviceSurfaceSupportKHR(device, i, surface, &presentSupport)
      found queue families 0 0
    }
    graphics and present queues are the same
    createInfo.imageSharingMode = VK_SHARING_MODE_EXCLUSIVE
    createInfo.preTransform = swapChainSupport.capabilities.currentTransform
    createInfo.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR
    createInfo.presentMode = presentMode
    createInfo.oldSwapchain = VK_NULL_HANDLE
    vkCreateSwapchainKHR(device, &createInfo, nullptr, &swapChain)
    vkGetSwapchainImagesKHR(device, swapChain, &imageCount, swapChainImages.data())
  }
  App::createImageViews {
    swapChainImageViews.resize(swapChainImages.size())
    swapChainImages.size():  3
    createInfo.viewType = VK_IMAGE_VIEW_TYPE_2D
    format:  50
    components: VK_COMPONENT_SWIZZLE_IDENTITY
    No mipmapping or multiple layers
    createInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
    vkCreateImageView(device, &createInfo, nullptr, &swapChainImageViews[i])
    createInfo.viewType = VK_IMAGE_VIEW_TYPE_2D
    format:  50
    components: VK_COMPONENT_SWIZZLE_IDENTITY
    No mipmapping or multiple layers
    createInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
    vkCreateImageView(device, &createInfo, nullptr, &swapChainImageViews[i])
    createInfo.viewType = VK_IMAGE_VIEW_TYPE_2D
    format:  50
    components: VK_COMPONENT_SWIZZLE_IDENTITY
    No mipmapping or multiple layers
    createInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
    vkCreateImageView(device, &createInfo, nullptr, &swapChainImageViews[i])
  }
}
App::mainLoop {
  while (!glfwWindowShouldClose(window))
}
App::cleanup {
  vkDestroyImageView(device, imageView, nullptr)
  vkDestroyImageView(device, imageView, nullptr)
  vkDestroyImageView(device, imageView, nullptr)
  vkDestroySwapchainKHR(device, swapChain, nullptr)
  vkDestroyDevice(device, nullptr)
  DestroyDebugUtilsMessengerEXT {
    auto func = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(instance, "vkDestroyDebugUtilsMessengerEXT")
    func(instance, debugMessenger, pAllocator)
  }
  vkDestroySurfaceKHR(instance, surface, nullptr)
  vkDestroyInstance(instance, nullptr)
  glfwDestroyWindow(window)
  glfwTerminate()
}
